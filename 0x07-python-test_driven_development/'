#!/usr/bin/python3

def matrix_mul(m_a, m_b):
    m_b_col = []
    new_lis = []
    sub_arr = []
    sum = 0
    
    if type(m_a) is not list:
        raise TypeError("m_a must be a list")

    if type(m_b) is not list:
        raise TypeError("m_b must be a list")

    for sub_list in m_a:
        if type(sub_list) is not list:
            raise TypeError("m_a must be a list of lists")

    for sub_list in m_b:
        if type(sub_list) is not list:
            raise TypeError("m_b must be a list of lists")

    if len(m_a) == 0 or len(m_a) == 1:
        raise ValueError("m_a can't be empty")

    if len(m_b) == 0 or len(m_b) == 1:
        raise ValueError("m_b can't be empty")

    for i in range(len(m_b) - 1):
        for k in range(len(m_b[i])):
            m_b_col.append([m_b[i][k], m_b[i + 1][k]])
    # print(m_b_row)
    for li in m_a:
        for i in range(len(m_b)):
            for k in range(len(m_b[i])):

                if type(li[k]) is not int or type(li[k]) is not float:
                    raise TypeError("m_a should contain only integers or floats")
                    
                if type(m_b_col[i][k]) is not int or type(m_b_col[i][k]]) is not float:
                    raise TypeError("m_b should contain only integers or floats")
                # print(f"{li[k]} * {m_b_row[i][k]} is {li[k] * m_b_row[i][k]}")
                sum += li[k] * m_b_col[i][k]
                # new_lis.append(li[k] * m_b_row[i][k])
            sub_arr.append(sum)
            sum = 0
        new_lis.append(sub_arr)
        sub_arr = []
        # print("heey")
    return (new_lis)
